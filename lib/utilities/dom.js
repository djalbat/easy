"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.elementsFromDOMElements = elementsFromDOMElements;
exports.ascendantDOMNodesFromDOMNode = ascendantDOMNodesFromDOMNode;
exports.descendantDOMNodesFromDOMNode = descendantDOMNodesFromDOMNode;
exports.filterDOMNodesBySelector = filterDOMNodesBySelector;
exports.domNodeMatchesSelector = domNodeMatchesSelector;
exports.filterDOMNodes = filterDOMNodes;
var _array = require("../utilities/array");
var _constants = require("../constants");
function elementsFromDOMElements(domElements) {
    var domElementsWithElements = filterDOMNodes(domElements, function(domElement) {
        return domElement.__element__ !== undefined;
    }), elements = domElementsWithElements.map(function(domElement) {
        return domElement.__element__;
    });
    return elements;
}
function ascendantDOMNodesFromDOMNode(domNode, height, param) {
    var ascendantDOMNodes = param === void 0 ? [] : param;
    if (height > 0) {
        var parentDOMNode = domNode.parentElement; ///
        if (parentDOMNode !== null) {
            ascendantDOMNodes.push(parentDOMNode);
            height--;
            ascendantDOMNodesFromDOMNode(parentDOMNode, height, ascendantDOMNodes);
        }
    }
    return ascendantDOMNodes;
}
function descendantDOMNodesFromDOMNode(domNode, depth, param) {
    var descendantDOMNodes = param === void 0 ? [] : param;
    if (depth > 0) {
        var childDOMNodes = domNode.childNodes; ///
        (0, _array).push(descendantDOMNodes, childDOMNodes);
        depth--;
        childDOMNodes.forEach(function(childDOMNode) {
            return descendantDOMNodesFromDOMNode(childDOMNode, depth, descendantDOMNodes);
        });
    }
    return descendantDOMNodes;
}
function filterDOMNodesBySelector(domNodes, selector) {
    var filteredDOMNodes = filterDOMNodes(domNodes, function(domNode) {
        return domNodeMatchesSelector(domNode, selector);
    });
    return filteredDOMNodes;
}
function domNodeMatchesSelector(domNode, selector) {
    var domNodeType = domNode.nodeType;
    switch(domNodeType){
        case Node.ELEMENT_NODE:
            {
                var domElement = domNode; ///
                return domElement.matches(selector);
            }
        case Node.TEXT_NODE:
            {
                if (selector === _constants.WILDCARD) {
                    return true;
                }
            }
    }
    return false;
}
function filterDOMNodes(domNodes, test) {
    var filteredDOMNodes = [], domNodesLength = domNodes.length;
    for(var index = 0; index < domNodesLength; index++){
        var domNode = domNodes[index], result = test(domNode);
        if (result) {
            filteredDOMNodes.push(domNode);
        }
    }
    return filteredDOMNodes;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZG9tLmpzIl0sIm5hbWVzIjpbInB1c2giLCJXSUxEQ0FSRCIsImVsZW1lbnRzRnJvbURPTUVsZW1lbnRzIiwiZG9tRWxlbWVudHMiLCJkb21FbGVtZW50c1dpdGhFbGVtZW50cyIsImZpbHRlckRPTU5vZGVzIiwiZG9tRWxlbWVudCIsIl9fZWxlbWVudF9fIiwidW5kZWZpbmVkIiwiZWxlbWVudHMiLCJtYXAiLCJhc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlIiwiZG9tTm9kZSIsImhlaWdodCIsImFzY2VuZGFudERPTU5vZGVzIiwicGFyZW50RE9NTm9kZSIsInBhcmVudEVsZW1lbnQiLCJkZXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZSIsImRlcHRoIiwiZGVzY2VuZGFudERPTU5vZGVzIiwiY2hpbGRET01Ob2RlcyIsImNoaWxkTm9kZXMiLCJmb3JFYWNoIiwiY2hpbGRET01Ob2RlIiwiZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yIiwiZG9tTm9kZXMiLCJzZWxlY3RvciIsImZpbHRlcmVkRE9NTm9kZXMiLCJkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yIiwiZG9tTm9kZVR5cGUiLCJub2RlVHlwZSIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJtYXRjaGVzIiwiVEVYVF9OT0RFIiwidGVzdCIsImRvbU5vZGVzTGVuZ3RoIiwibGVuZ3RoIiwiaW5kZXgiLCJyZXN1bHQiXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7UUFLSSx1QkFBdUIsR0FBdkIsdUJBQXVCO1FBT3ZCLDRCQUE0QixHQUE1Qiw0QkFBNEI7UUFnQjVCLDZCQUE2QixHQUE3Qiw2QkFBNkI7UUFjN0Isd0JBQXdCLEdBQXhCLHdCQUF3QjtRQU14QixzQkFBc0IsR0FBdEIsc0JBQXNCO1FBb0J0QixjQUFjLEdBQWQsY0FBYztBQWxFVCxHQUFvQixDQUFwQixNQUFvQjtBQUNoQixHQUFjLENBQWQsVUFBYztTQUV2Qix1QkFBdUIsQ0FBQyxXQUFXLEVBQUUs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LEtBQUssR0FBSSxDQUFDO1FBQ3BELEdBQUssQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLEtBQUssR0FDeEIsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPO1FBRTNCLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUNYLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPO1FBQy9CLENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLGdCQUFnQjtBQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHB1c2ggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBXSUxEQ0FSRCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzKGRvbUVsZW1lbnRzKSB7XG4gIGNvbnN0IGRvbUVsZW1lbnRzV2l0aEVsZW1lbnRzID0gZmlsdGVyRE9NTm9kZXMoZG9tRWxlbWVudHMsIChkb21FbGVtZW50KSA9PiAoZG9tRWxlbWVudC5fX2VsZW1lbnRfXyAhPT0gdW5kZWZpbmVkKSksXG4gICAgICAgIGVsZW1lbnRzID0gZG9tRWxlbWVudHNXaXRoRWxlbWVudHMubWFwKChkb21FbGVtZW50KSA9PiBkb21FbGVtZW50Ll9fZWxlbWVudF9fKTtcblxuICByZXR1cm4gZWxlbWVudHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlKGRvbU5vZGUsIGhlaWdodCwgYXNjZW5kYW50RE9NTm9kZXMgPSBbXSkge1xuICBpZiAoaGVpZ2h0ID4gMCkge1xuICAgIGNvbnN0IHBhcmVudERPTU5vZGUgPSBkb21Ob2RlLnBhcmVudEVsZW1lbnQ7ICAvLy9cblxuICAgIGlmIChwYXJlbnRET01Ob2RlICE9PSBudWxsKSB7XG4gICAgICBhc2NlbmRhbnRET01Ob2Rlcy5wdXNoKHBhcmVudERPTU5vZGUpO1xuXG4gICAgICBoZWlnaHQtLTtcblxuICAgICAgYXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZShwYXJlbnRET01Ob2RlLCBoZWlnaHQsIGFzY2VuZGFudERPTU5vZGVzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXNjZW5kYW50RE9NTm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZShkb21Ob2RlLCBkZXB0aCwgZGVzY2VuZGFudERPTU5vZGVzID0gW10pIHtcbiAgaWYgKGRlcHRoID4gMCkge1xuICAgIGNvbnN0IGNoaWxkRE9NTm9kZXMgPSBkb21Ob2RlLmNoaWxkTm9kZXM7ICAvLy9cblxuICAgIHB1c2goZGVzY2VuZGFudERPTU5vZGVzLCBjaGlsZERPTU5vZGVzKTtcblxuICAgIGRlcHRoLS07XG5cbiAgICBjaGlsZERPTU5vZGVzLmZvckVhY2goKGNoaWxkRE9NTm9kZSkgPT4gZGVzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUoY2hpbGRET01Ob2RlLCBkZXB0aCwgZGVzY2VuZGFudERPTU5vZGVzKSk7XG4gIH1cblxuICByZXR1cm4gZGVzY2VuZGFudERPTU5vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yKGRvbU5vZGVzLCBzZWxlY3Rvcikge1xuICBjb25zdCBmaWx0ZXJlZERPTU5vZGVzID0gZmlsdGVyRE9NTm9kZXMoZG9tTm9kZXMsIChkb21Ob2RlKSA9PiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKGRvbU5vZGUsIHNlbGVjdG9yKSk7XG5cbiAgcmV0dXJuIGZpbHRlcmVkRE9NTm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKGRvbU5vZGUsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IGRvbU5vZGVUeXBlID0gZG9tTm9kZS5ub2RlVHlwZTtcblxuICBzd2l0Y2ggKGRvbU5vZGVUeXBlKSB7XG4gICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERToge1xuICAgICAgY29uc3QgZG9tRWxlbWVudCA9IGRvbU5vZGU7IC8vL1xuXG4gICAgICByZXR1cm4gZG9tRWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICBjYXNlIE5vZGUuVEVYVF9OT0RFOiB7XG4gICAgICBpZiAoc2VsZWN0b3IgPT09IFdJTERDQVJEKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckRPTU5vZGVzKGRvbU5vZGVzLCB0ZXN0KSB7XG4gIGNvbnN0IGZpbHRlcmVkRE9NTm9kZXMgPSBbXSxcbiAgICAgICAgZG9tTm9kZXNMZW5ndGggPSBkb21Ob2Rlcy5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGRvbU5vZGVzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgZG9tTm9kZSA9IGRvbU5vZGVzW2luZGV4XSxcbiAgICAgICAgICByZXN1bHQgPSB0ZXN0KGRvbU5vZGUpO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgZmlsdGVyZWRET01Ob2Rlcy5wdXNoKGRvbU5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaWx0ZXJlZERPTU5vZGVzO1xufVxuIl19