"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _eventTypes = require("../eventTypes");
function onMouseUp(mouseUpHandler, element) {
    this.on(_eventTypes.MOUSEUP_EVENT_TYPE, mouseUpHandler, element);
}
function offMouseUp(mouseUpHandler, element) {
    this.off(_eventTypes.MOUSEUP_EVENT_TYPE, mouseUpHandler, element);
}
function onMouseOut(mouseOutHandler, element) {
    this.on(_eventTypes.MOUSEOUT_EVENT_TYPE, mouseOutHandler, element);
}
function offMouseOut(mouseOutHandler, element) {
    this.off(_eventTypes.MOUSEOUT_EVENT_TYPE, mouseOutHandler, element);
}
function onMouseDown(mouseDownHandler, element) {
    this.on(_eventTypes.MOUSEDOWN_EVENT_TYPE, mouseDownHandler, element);
}
function offMouseDown(mouseDownHandler, element) {
    this.off(_eventTypes.MOUSEDOWN_EVENT_TYPE, mouseDownHandler, element);
}
function onMouseOver(mouseOverHandler, element) {
    this.on(_eventTypes.MOUSEOVER_EVENT_TYPE, mouseOverHandler, element);
}
function offMouseOver(mouseOverHandler, element) {
    this.off(_eventTypes.MOUSEOVER_EVENT_TYPE, mouseOverHandler, element);
}
function onMouseMove(mouseMoveHandler, element) {
    this.on(_eventTypes.MOUSEMOVE_EVENT_TYPE, mouseMoveHandler, element);
}
function offMouseMove(mouseMoveHandler, element) {
    this.off(_eventTypes.MOUSEMOVE_EVENT_TYPE, mouseMoveHandler, element);
}
var mouseMixins = {
    onMouseUp: onMouseUp,
    offMouseUp: offMouseUp,
    onMouseOut: onMouseOut,
    offMouseOut: offMouseOut,
    onMouseDown: onMouseDown,
    offMouseDown: offMouseDown,
    onMouseOver: onMouseOver,
    offMouseOver: offMouseOver,
    onMouseMove: onMouseMove,
    offMouseMove: offMouseMove
};
var _default = mouseMixins;
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvbW91c2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IE1PVVNFVVBfRVZFTlRfVFlQRSxcbiAgICAgICAgIE1PVVNFT1VUX0VWRU5UX1RZUEUsXG4gICAgICAgICBNT1VTRURPV05fRVZFTlRfVFlQRSxcbiAgICAgICAgIE1PVVNFT1ZFUl9FVkVOVF9UWVBFLFxuICAgICAgICAgTU9VU0VNT1ZFX0VWRU5UX1RZUEUgfSBmcm9tIFwiLi4vZXZlbnRUeXBlc1wiO1xuXG5mdW5jdGlvbiBvbk1vdXNlVXAobW91c2VVcEhhbmRsZXIsIGVsZW1lbnQpIHsgdGhpcy5vbihNT1VTRVVQX0VWRU5UX1RZUEUsIG1vdXNlVXBIYW5kbGVyLCBlbGVtZW50KTsgfVxuXG5mdW5jdGlvbiBvZmZNb3VzZVVwKG1vdXNlVXBIYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub2ZmKE1PVVNFVVBfRVZFTlRfVFlQRSwgbW91c2VVcEhhbmRsZXIsIGVsZW1lbnQpOyB9XG5cbmZ1bmN0aW9uIG9uTW91c2VPdXQobW91c2VPdXRIYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub24oTU9VU0VPVVRfRVZFTlRfVFlQRSwgbW91c2VPdXRIYW5kbGVyLCBlbGVtZW50KTsgfVxuXG5mdW5jdGlvbiBvZmZNb3VzZU91dChtb3VzZU91dEhhbmRsZXIsIGVsZW1lbnQpIHsgdGhpcy5vZmYoTU9VU0VPVVRfRVZFTlRfVFlQRSwgbW91c2VPdXRIYW5kbGVyLCBlbGVtZW50KTsgfVxuXG5mdW5jdGlvbiBvbk1vdXNlRG93bihtb3VzZURvd25IYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub24oTU9VU0VET1dOX0VWRU5UX1RZUEUsIG1vdXNlRG93bkhhbmRsZXIsIGVsZW1lbnQpOyB9XG5cbmZ1bmN0aW9uIG9mZk1vdXNlRG93bihtb3VzZURvd25IYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub2ZmKE1PVVNFRE9XTl9FVkVOVF9UWVBFLCBtb3VzZURvd25IYW5kbGVyLCBlbGVtZW50KTsgfVxuXG5mdW5jdGlvbiBvbk1vdXNlT3Zlcihtb3VzZU92ZXJIYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub24oTU9VU0VPVkVSX0VWRU5UX1RZUEUsIG1vdXNlT3ZlckhhbmRsZXIsIGVsZW1lbnQpOyB9XG5cbmZ1bmN0aW9uIG9mZk1vdXNlT3Zlcihtb3VzZU92ZXJIYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub2ZmKE1PVVNFT1ZFUl9FVkVOVF9UWVBFLCBtb3VzZU92ZXJIYW5kbGVyLCBlbGVtZW50KTsgfVxuXG5mdW5jdGlvbiBvbk1vdXNlTW92ZShtb3VzZU1vdmVIYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub24oTU9VU0VNT1ZFX0VWRU5UX1RZUEUsIG1vdXNlTW92ZUhhbmRsZXIsIGVsZW1lbnQpOyB9XG5cbmZ1bmN0aW9uIG9mZk1vdXNlTW92ZShtb3VzZU1vdmVIYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub2ZmKE1PVVNFTU9WRV9FVkVOVF9UWVBFLCBtb3VzZU1vdmVIYW5kbGVyLCBlbGVtZW50KTsgfVxuXG5jb25zdCBtb3VzZU1peGlucyA9IHtcbiAgb25Nb3VzZVVwLFxuICBvZmZNb3VzZVVwLFxuICBvbk1vdXNlT3V0LFxuICBvZmZNb3VzZU91dCxcbiAgb25Nb3VzZURvd24sXG4gIG9mZk1vdXNlRG93bixcbiAgb25Nb3VzZU92ZXIsXG4gIG9mZk1vdXNlT3ZlcixcbiAgb25Nb3VzZU1vdmUsXG4gIG9mZk1vdXNlTW92ZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbW91c2VNaXhpbnM7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7Ozs7SUFNeUIsV0FBZTtTQUUzQyxTQUFTLENBQUMsY0FBYyxFQUFFLE9BQU87U0FBUyxFQUFFLENBRmhCLFdBQWUscUJBRXNCLGNBQWMsRUFBRSxPQUFPOztTQUV4RixVQUFVLENBQUMsY0FBYyxFQUFFLE9BQU87U0FBUyxHQUFHLENBSmxCLFdBQWUscUJBSXdCLGNBQWMsRUFBRSxPQUFPOztTQUUxRixVQUFVLENBQUMsZUFBZSxFQUFFLE9BQU87U0FBUyxFQUFFLENBTmxCLFdBQWUsc0JBTXlCLGVBQWUsRUFBRSxPQUFPOztTQUU1RixXQUFXLENBQUMsZUFBZSxFQUFFLE9BQU87U0FBUyxHQUFHLENBUnBCLFdBQWUsc0JBUTJCLGVBQWUsRUFBRSxPQUFPOztTQUU5RixXQUFXLENBQUMsZ0JBQWdCLEVBQUUsT0FBTztTQUFTLEVBQUUsQ0FWcEIsV0FBZSx1QkFVNEIsZ0JBQWdCLEVBQUUsT0FBTzs7U0FFaEcsWUFBWSxDQUFDLGdCQUFnQixFQUFFLE9BQU87U0FBUyxHQUFHLENBWnRCLFdBQWUsdUJBWThCLGdCQUFnQixFQUFFLE9BQU87O1NBRWxHLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPO1NBQVMsRUFBRSxDQWRwQixXQUFlLHVCQWM0QixnQkFBZ0IsRUFBRSxPQUFPOztTQUVoRyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsT0FBTztTQUFTLEdBQUcsQ0FoQnRCLFdBQWUsdUJBZ0I4QixnQkFBZ0IsRUFBRSxPQUFPOztTQUVsRyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsT0FBTztTQUFTLEVBQUUsQ0FsQnBCLFdBQWUsdUJBa0I0QixnQkFBZ0IsRUFBRSxPQUFPOztTQUVoRyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsT0FBTztTQUFTLEdBQUcsQ0FwQnRCLFdBQWUsdUJBb0I4QixnQkFBZ0IsRUFBRSxPQUFPOztJQUVyRyxXQUFXO0lBQ2YsU0FBUyxFQUFULFNBQVM7SUFDVCxVQUFVLEVBQVYsVUFBVTtJQUNWLFVBQVUsRUFBVixVQUFVO0lBQ1YsV0FBVyxFQUFYLFdBQVc7SUFDWCxXQUFXLEVBQVgsV0FBVztJQUNYLFlBQVksRUFBWixZQUFZO0lBQ1osV0FBVyxFQUFYLFdBQVc7SUFDWCxZQUFZLEVBQVosWUFBWTtJQUNaLFdBQVcsRUFBWCxXQUFXO0lBQ1gsWUFBWSxFQUFaLFlBQVk7O2VBR0MsV0FBVyJ9