"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _array = require("../utilities/array");
var _constants = require("../constants");
var _dom = require("../utilities/dom");
function getParentElement(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var parentElement = null;
    var parentDOMElement = this.domElement.parentElement;
    if (parentDOMElement !== null) {
        if (parentDOMElement.matches(selector)) {
            var parentDOMElements = [
                parentDOMElement
            ], parentElements = (0, _dom).elementsFromDOMElements(parentDOMElements), firstParentElement = (0, _array).first(parentElements);
            parentElement = firstParentElement || null;
        }
    }
    return parentElement;
}
function getChildElements(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var childDOMNodes = this.domElement.childNodes, childDOMElements = (0, _dom).filterDOMNodesBySelector(childDOMNodes, selector), childElements = (0, _dom).elementsFromDOMElements(childDOMElements);
    return childElements;
}
function getAscendantElements(param, param1) {
    var selector = param === void 0 ? _constants.WILDCARD : param, height = param1 === void 0 ? Infinity : param1;
    var domNode = this.domElement, ascendantDOMNodes = (0, _dom).ascendantDOMNodesFromDOMNode(domNode, height), ascendantDOMElements = (0, _dom).filterDOMNodesBySelector(ascendantDOMNodes, selector), ascendantElements = (0, _dom).elementsFromDOMElements(ascendantDOMElements);
    return ascendantElements;
}
function getDescendantElements(param, param1) {
    var selector = param === void 0 ? _constants.WILDCARD : param, depth = param1 === void 0 ? Infinity : param1;
    var domNode = this.domElement, descendantDOMNodes = (0, _dom).descendantDOMNodesFromDOMNode(domNode, depth), descendantDOMElements = (0, _dom).filterDOMNodesBySelector(descendantDOMNodes, selector), descendantElements = (0, _dom).elementsFromDOMElements(descendantDOMElements);
    return descendantElements;
}
function getNextSiblingElement(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var nextSiblingElement = null;
    var nextSiblingDOMNode = this.domElement.nextSibling;
    if (nextSiblingDOMNode !== null && (0, _dom).domNodeMatchesSelector(nextSiblingDOMNode, selector)) {
        nextSiblingElement = nextSiblingDOMNode.__element__ || null;
    }
    return nextSiblingElement;
}
function getPreviousSiblingElement(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var previousSiblingElement = null;
    var previousSiblingDOMNode = this.domElement.previousSibling; ///
    if (previousSiblingDOMNode !== null && (0, _dom).domNodeMatchesSelector(previousSiblingDOMNode, selector)) {
        previousSiblingElement = previousSiblingDOMNode.__element__ || null;
    }
    return previousSiblingElement;
}
var elementMixins = {
    getParentElement: getParentElement,
    getChildElements: getChildElements,
    getAscendantElements: getAscendantElements,
    getDescendantElements: getDescendantElements,
    getNextSiblingElement: getNextSiblingElement,
    getPreviousSiblingElement: getPreviousSiblingElement
};
var _default = elementMixins;
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZWxlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBXSUxEQ0FSRCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IsIGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzLCBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IsIGFzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUsIGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kb21cIjtcblxuZnVuY3Rpb24gZ2V0UGFyZW50RWxlbWVudChzZWxlY3RvciA9IFdJTERDQVJEKSB7XG4gIGxldCBwYXJlbnRFbGVtZW50ID0gbnVsbDtcblxuICBjb25zdCBwYXJlbnRET01FbGVtZW50ID0gdGhpcy5kb21FbGVtZW50LnBhcmVudEVsZW1lbnQ7XG5cbiAgaWYgKHBhcmVudERPTUVsZW1lbnQgIT09IG51bGwpIHtcbiAgICBpZiAocGFyZW50RE9NRWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgY29uc3QgcGFyZW50RE9NRWxlbWVudHMgPSBbcGFyZW50RE9NRWxlbWVudF0sXG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50cyA9IGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzKHBhcmVudERPTUVsZW1lbnRzKSxcbiAgICAgICAgICAgIGZpcnN0UGFyZW50RWxlbWVudCA9IGZpcnN0KHBhcmVudEVsZW1lbnRzKTtcblxuICAgICAgcGFyZW50RWxlbWVudCA9IGZpcnN0UGFyZW50RWxlbWVudCB8fCBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJlbnRFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBnZXRDaGlsZEVsZW1lbnRzKHNlbGVjdG9yID0gV0lMRENBUkQpIHtcbiAgY29uc3QgY2hpbGRET01Ob2RlcyA9IHRoaXMuZG9tRWxlbWVudC5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZERPTUVsZW1lbnRzID0gZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yKGNoaWxkRE9NTm9kZXMsIHNlbGVjdG9yKSxcbiAgICAgICAgY2hpbGRFbGVtZW50cyA9IGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzKGNoaWxkRE9NRWxlbWVudHMpO1xuXG4gIHJldHVybiBjaGlsZEVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBnZXRBc2NlbmRhbnRFbGVtZW50cyhzZWxlY3RvciA9IFdJTERDQVJELCBoZWlnaHQgPSBJbmZpbml0eSkge1xuICBjb25zdCBkb21Ob2RlID0gdGhpcy5kb21FbGVtZW50LCAgLy8vXG4gICAgICAgIGFzY2VuZGFudERPTU5vZGVzID0gYXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZShkb21Ob2RlLCBoZWlnaHQpLFxuICAgICAgICBhc2NlbmRhbnRET01FbGVtZW50cyA9IGZpbHRlckRPTU5vZGVzQnlTZWxlY3Rvcihhc2NlbmRhbnRET01Ob2Rlcywgc2VsZWN0b3IpLFxuICAgICAgICBhc2NlbmRhbnRFbGVtZW50cyA9IGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzKGFzY2VuZGFudERPTUVsZW1lbnRzKTtcblxuICByZXR1cm4gYXNjZW5kYW50RWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIGdldERlc2NlbmRhbnRFbGVtZW50cyhzZWxlY3RvciA9IFdJTERDQVJELCBkZXB0aCA9IEluZmluaXR5KSB7XG4gIGNvbnN0IGRvbU5vZGUgPSB0aGlzLmRvbUVsZW1lbnQsICAvLy9cbiAgICAgICAgZGVzY2VuZGFudERPTU5vZGVzID0gZGVzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUoZG9tTm9kZSwgZGVwdGgpLFxuICAgICAgICBkZXNjZW5kYW50RE9NRWxlbWVudHMgPSBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IoZGVzY2VuZGFudERPTU5vZGVzLCBzZWxlY3RvciksXG4gICAgICAgIGRlc2NlbmRhbnRFbGVtZW50cyA9IGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzKGRlc2NlbmRhbnRET01FbGVtZW50cyk7XG5cbiAgcmV0dXJuIGRlc2NlbmRhbnRFbGVtZW50cztcbn1cblxuZnVuY3Rpb24gZ2V0TmV4dFNpYmxpbmdFbGVtZW50KHNlbGVjdG9yID0gV0lMRENBUkQpIHtcbiAgbGV0IG5leHRTaWJsaW5nRWxlbWVudCA9IG51bGw7XG5cbiAgY29uc3QgbmV4dFNpYmxpbmdET01Ob2RlID0gdGhpcy5kb21FbGVtZW50Lm5leHRTaWJsaW5nO1xuXG4gIGlmICgobmV4dFNpYmxpbmdET01Ob2RlICE9PSBudWxsKSAmJiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKG5leHRTaWJsaW5nRE9NTm9kZSwgc2VsZWN0b3IpKSB7XG4gICAgbmV4dFNpYmxpbmdFbGVtZW50ID0gbmV4dFNpYmxpbmdET01Ob2RlLl9fZWxlbWVudF9fIHx8IG51bGw7XG4gIH1cblxuICByZXR1cm4gbmV4dFNpYmxpbmdFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBnZXRQcmV2aW91c1NpYmxpbmdFbGVtZW50KHNlbGVjdG9yID0gV0lMRENBUkQpIHtcbiAgbGV0IHByZXZpb3VzU2libGluZ0VsZW1lbnQgPSBudWxsO1xuXG4gIGNvbnN0IHByZXZpb3VzU2libGluZ0RPTU5vZGUgPSB0aGlzLmRvbUVsZW1lbnQucHJldmlvdXNTaWJsaW5nOyAgLy8vXG5cbiAgaWYgKChwcmV2aW91c1NpYmxpbmdET01Ob2RlICE9PSBudWxsKSAmJiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKHByZXZpb3VzU2libGluZ0RPTU5vZGUsIHNlbGVjdG9yKSkge1xuICAgIHByZXZpb3VzU2libGluZ0VsZW1lbnQgPSBwcmV2aW91c1NpYmxpbmdET01Ob2RlLl9fZWxlbWVudF9fIHx8IG51bGw7XG4gIH1cblxuICByZXR1cm4gcHJldmlvdXNTaWJsaW5nRWxlbWVudDtcbn1cblxuY29uc3QgZWxlbWVudE1peGlucyA9IHtcbiAgZ2V0UGFyZW50RWxlbWVudCxcbiAgZ2V0Q2hpbGRFbGVtZW50cyxcbiAgZ2V0QXNjZW5kYW50RWxlbWVudHMsXG4gIGdldERlc2NlbmRhbnRFbGVtZW50cyxcbiAgZ2V0TmV4dFNpYmxpbmdFbGVtZW50LFxuICBnZXRQcmV2aW91c1NpYmxpbmdFbGVtZW50XG59O1xuXG5leHBvcnQgZGVmYXVsdCBlbGVtZW50TWl4aW5zO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7O0lBRVUsTUFBb0I7SUFDakIsVUFBYztJQUNnSCxJQUFrQjtTQUVoSyxnQkFBZ0IsQ0FBQyxLQUFtQjtRQUFuQixRQUFRLEdBQVIsS0FBbUIsY0FIcEIsVUFBYyxZQUdiLEtBQW1CO1FBQ3ZDLGFBQWEsR0FBRyxJQUFJO1FBRWxCLGdCQUFnQixRQUFRLFVBQVUsQ0FBQyxhQUFhO1FBRWxELGdCQUFnQixLQUFLLElBQUk7WUFDdkIsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFFBQVE7Z0JBQzdCLGlCQUFpQjtnQkFBSSxnQkFBZ0I7ZUFDckMsY0FBYyxPQVY2SCxJQUFrQiwwQkFVcEgsaUJBQWlCLEdBQzFELGtCQUFrQixPQWJSLE1BQW9CLFFBYUgsY0FBYztZQUUvQyxhQUFhLEdBQUcsa0JBQWtCLElBQUksSUFBSTs7O1dBSXZDLGFBQWE7O1NBR2IsZ0JBQWdCLENBQUMsS0FBbUI7UUFBbkIsUUFBUSxHQUFSLEtBQW1CLGNBckJwQixVQUFjLFlBcUJiLEtBQW1CO1FBQ3JDLGFBQWEsUUFBUSxVQUFVLENBQUMsVUFBVSxFQUMxQyxnQkFBZ0IsT0F0QitILElBQWtCLDJCQXNCckgsYUFBYSxFQUFFLFFBQVEsR0FDbkUsYUFBYSxPQXZCa0ksSUFBa0IsMEJBdUJ6SCxnQkFBZ0I7V0FFdkQsYUFBYTs7U0FHYixvQkFBb0IsQ0FBQyxLQUFtQixFQUFFLE1BQWlCO1FBQXRDLFFBQVEsR0FBUixLQUFtQixjQTdCeEIsVUFBYyxZQTZCVCxLQUFtQixFQUFFLE1BQU0sR0FBTixNQUFpQixjQUFSLFFBQVEsR0FBakIsTUFBaUI7UUFDNUQsT0FBTyxRQUFRLFVBQVUsRUFDekIsaUJBQWlCLE9BOUI4SCxJQUFrQiwrQkE4QmhILE9BQU8sRUFBRSxNQUFNLEdBQ2hFLG9CQUFvQixPQS9CMkgsSUFBa0IsMkJBK0JqSCxpQkFBaUIsRUFBRSxRQUFRLEdBQzNFLGlCQUFpQixPQWhDOEgsSUFBa0IsMEJBZ0NySCxvQkFBb0I7V0FFL0QsaUJBQWlCOztTQUdqQixxQkFBcUIsQ0FBQyxLQUFtQixFQUFFLE1BQWdCO1FBQXJDLFFBQVEsR0FBUixLQUFtQixjQXRDekIsVUFBYyxZQXNDUixLQUFtQixFQUFFLEtBQUssR0FBTCxNQUFnQixjQUFSLFFBQVEsR0FBaEIsTUFBZ0I7UUFDNUQsT0FBTyxRQUFRLFVBQVUsRUFDekIsa0JBQWtCLE9BdkM2SCxJQUFrQixnQ0F1QzlHLE9BQU8sRUFBRSxLQUFLLEdBQ2pFLHFCQUFxQixPQXhDMEgsSUFBa0IsMkJBd0NoSCxrQkFBa0IsRUFBRSxRQUFRLEdBQzdFLGtCQUFrQixPQXpDNkgsSUFBa0IsMEJBeUNwSCxxQkFBcUI7V0FFakUsa0JBQWtCOztTQUdsQixxQkFBcUIsQ0FBQyxLQUFtQjtRQUFuQixRQUFRLEdBQVIsS0FBbUIsY0EvQ3pCLFVBQWMsWUErQ1IsS0FBbUI7UUFDNUMsa0JBQWtCLEdBQUcsSUFBSTtRQUV2QixrQkFBa0IsUUFBUSxVQUFVLENBQUMsV0FBVztRQUVqRCxrQkFBa0IsS0FBSyxJQUFJLFFBbkRxSCxJQUFrQix5QkFtRDNHLGtCQUFrQixFQUFFLFFBQVE7UUFDdEYsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsV0FBVyxJQUFJLElBQUk7O1dBR3RELGtCQUFrQjs7U0FHbEIseUJBQXlCLENBQUMsS0FBbUI7UUFBbkIsUUFBUSxHQUFSLEtBQW1CLGNBM0Q3QixVQUFjLFlBMkRKLEtBQW1CO1FBQ2hELHNCQUFzQixHQUFHLElBQUk7UUFFM0Isc0JBQXNCLFFBQVEsVUFBVSxDQUFDLGVBQWUsQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFFL0Qsc0JBQXNCLEtBQUssSUFBSSxRQS9EaUgsSUFBa0IseUJBK0R2RyxzQkFBc0IsRUFBRSxRQUFRO1FBQzlGLHNCQUFzQixHQUFHLHNCQUFzQixDQUFDLFdBQVcsSUFBSSxJQUFJOztXQUc5RCxzQkFBc0I7O0lBR3pCLGFBQWE7SUFDakIsZ0JBQWdCLEVBQWhCLGdCQUFnQjtJQUNoQixnQkFBZ0IsRUFBaEIsZ0JBQWdCO0lBQ2hCLG9CQUFvQixFQUFwQixvQkFBb0I7SUFDcEIscUJBQXFCLEVBQXJCLHFCQUFxQjtJQUNyQixxQkFBcUIsRUFBckIscUJBQXFCO0lBQ3JCLHlCQUF5QixFQUF6Qix5QkFBeUI7O2VBR1osYUFBYSJ9