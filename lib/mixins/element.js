"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _array = require("../utilities/array");
var _constants = require("../constants");
var _dom = require("../utilities/dom");
function getParentElement() {
    var selector = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _constants.WILDCARD;
    var parentElement = null;
    var parentDOMElement = this.domElement.parentElement; ///
    if (parentDOMElement !== null) {
        if (parentDOMElement.matches(selector)) {
            var parentDOMElements = [
                parentDOMElement
            ], parentElements = (0, _dom.elementsFromDOMElements)(parentDOMElements), firstParentElement = (0, _array.first)(parentElements);
            parentElement = firstParentElement || null;
        }
    }
    return parentElement;
}
function getChildElements() {
    var selector = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _constants.WILDCARD;
    var childDOMNodes = this.domElement.childNodes, childDOMElements = (0, _dom.filterDOMNodesBySelector)(childDOMNodes, selector), childElements = (0, _dom.elementsFromDOMElements)(childDOMElements);
    return childElements;
}
function getAscendantElements() {
    var selector = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _constants.WILDCARD, maximumHeight = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Infinity;
    var height = maximumHeight, domNode = this.domElement, ascendantDOMNodes = (0, _dom.ascendantDOMNodesFromDOMNode)(domNode, height), ascendantDOMElements = (0, _dom.filterDOMNodesBySelector)(ascendantDOMNodes, selector), ascendantElements = (0, _dom.elementsFromDOMElements)(ascendantDOMElements);
    return ascendantElements;
}
function getDescendantElements() {
    var selector = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _constants.WILDCARD, maximumDepth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Infinity;
    var depth = maximumDepth, domNode = this.domElement, descendantDOMNodes = (0, _dom.descendantDOMNodesFromDOMNode)(domNode, depth), descendantDOMElements = (0, _dom.filterDOMNodesBySelector)(descendantDOMNodes, selector), descendantElements = (0, _dom.elementsFromDOMElements)(descendantDOMElements);
    return descendantElements;
}
function getNextSiblingElement() {
    var selector = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _constants.WILDCARD;
    var nextSiblingElement = null;
    var nextSiblingDOMNode = this.domElement.nextSibling; ///
    if (nextSiblingDOMNode !== null && (0, _dom.domNodeMatchesSelector)(nextSiblingDOMNode, selector)) {
        nextSiblingElement = nextSiblingDOMNode.__element__ || null;
    }
    return nextSiblingElement;
}
function getPreviousSiblingElement() {
    var selector = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _constants.WILDCARD;
    var previousSiblingElement = null;
    var previousSiblingDOMNode = this.domElement.previousSibling; ///
    if (previousSiblingDOMNode !== null && (0, _dom.domNodeMatchesSelector)(previousSiblingDOMNode, selector)) {
        previousSiblingElement = previousSiblingDOMNode.__element__ || null;
    }
    return previousSiblingElement;
}
var elementMixins = {
    getParentElement: getParentElement,
    getChildElements: getChildElements,
    getAscendantElements: getAscendantElements,
    getDescendantElements: getDescendantElements,
    getNextSiblingElement: getNextSiblingElement,
    getPreviousSiblingElement: getPreviousSiblingElement
};
var _default = elementMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZWxlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBXSUxEQ0FSRCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IsIGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzLCBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IsIGFzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUsIGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kb21cIjtcblxuZnVuY3Rpb24gZ2V0UGFyZW50RWxlbWVudChzZWxlY3RvciA9IFdJTERDQVJEKSB7XG4gIGxldCBwYXJlbnRFbGVtZW50ID0gbnVsbDtcblxuICBjb25zdCBwYXJlbnRET01FbGVtZW50ID0gdGhpcy5kb21FbGVtZW50LnBhcmVudEVsZW1lbnQ7IC8vL1xuXG4gIGlmIChwYXJlbnRET01FbGVtZW50ICE9PSBudWxsKSB7XG4gICAgaWYgKHBhcmVudERPTUVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgIGNvbnN0IHBhcmVudERPTUVsZW1lbnRzID0gW1xuICAgICAgICAgICAgICBwYXJlbnRET01FbGVtZW50XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgcGFyZW50RWxlbWVudHMgPSBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhwYXJlbnRET01FbGVtZW50cyksXG4gICAgICAgICAgICBmaXJzdFBhcmVudEVsZW1lbnQgPSBmaXJzdChwYXJlbnRFbGVtZW50cyk7XG5cbiAgICAgIHBhcmVudEVsZW1lbnQgPSBmaXJzdFBhcmVudEVsZW1lbnQgfHwgbnVsbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyZW50RWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hpbGRFbGVtZW50cyhzZWxlY3RvciA9IFdJTERDQVJEKSB7XG4gIGNvbnN0IGNoaWxkRE9NTm9kZXMgPSB0aGlzLmRvbUVsZW1lbnQuY2hpbGROb2RlcywgLy8vXG4gICAgICAgIGNoaWxkRE9NRWxlbWVudHMgPSBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IoY2hpbGRET01Ob2Rlcywgc2VsZWN0b3IpLFxuICAgICAgICBjaGlsZEVsZW1lbnRzID0gZWxlbWVudHNGcm9tRE9NRWxlbWVudHMoY2hpbGRET01FbGVtZW50cyk7XG5cbiAgcmV0dXJuIGNoaWxkRWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIGdldEFzY2VuZGFudEVsZW1lbnRzKHNlbGVjdG9yID0gV0lMRENBUkQsIG1heGltdW1IZWlnaHQgPSBJbmZpbml0eSkge1xuICBjb25zdCBoZWlnaHQgPSBtYXhpbXVtSGVpZ2h0LCAvLy9cbiAgICAgICAgZG9tTm9kZSA9IHRoaXMuZG9tRWxlbWVudCwgIC8vL1xuICAgICAgICBhc2NlbmRhbnRET01Ob2RlcyA9IGFzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUoZG9tTm9kZSwgaGVpZ2h0KSxcbiAgICAgICAgYXNjZW5kYW50RE9NRWxlbWVudHMgPSBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IoYXNjZW5kYW50RE9NTm9kZXMsIHNlbGVjdG9yKSxcbiAgICAgICAgYXNjZW5kYW50RWxlbWVudHMgPSBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhhc2NlbmRhbnRET01FbGVtZW50cyk7XG5cbiAgcmV0dXJuIGFzY2VuZGFudEVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBnZXREZXNjZW5kYW50RWxlbWVudHMoc2VsZWN0b3IgPSBXSUxEQ0FSRCwgbWF4aW11bURlcHRoID0gSW5maW5pdHkpIHtcbiAgY29uc3QgZGVwdGggPSBtYXhpbXVtRGVwdGgsIC8vL1xuICAgICAgICBkb21Ob2RlID0gdGhpcy5kb21FbGVtZW50LCAgLy8vXG4gICAgICAgIGRlc2NlbmRhbnRET01Ob2RlcyA9IGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlKGRvbU5vZGUsIGRlcHRoKSxcbiAgICAgICAgZGVzY2VuZGFudERPTUVsZW1lbnRzID0gZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yKGRlc2NlbmRhbnRET01Ob2Rlcywgc2VsZWN0b3IpLFxuICAgICAgICBkZXNjZW5kYW50RWxlbWVudHMgPSBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhkZXNjZW5kYW50RE9NRWxlbWVudHMpO1xuXG4gIHJldHVybiBkZXNjZW5kYW50RWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIGdldE5leHRTaWJsaW5nRWxlbWVudChzZWxlY3RvciA9IFdJTERDQVJEKSB7XG4gIGxldCBuZXh0U2libGluZ0VsZW1lbnQgPSBudWxsO1xuXG4gIGNvbnN0IG5leHRTaWJsaW5nRE9NTm9kZSA9IHRoaXMuZG9tRWxlbWVudC5uZXh0U2libGluZzsgLy8vXG5cbiAgaWYgKChuZXh0U2libGluZ0RPTU5vZGUgIT09IG51bGwpICYmIGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IobmV4dFNpYmxpbmdET01Ob2RlLCBzZWxlY3RvcikpIHtcbiAgICBuZXh0U2libGluZ0VsZW1lbnQgPSBuZXh0U2libGluZ0RPTU5vZGUuX19lbGVtZW50X18gfHwgbnVsbDtcbiAgfVxuXG4gIHJldHVybiBuZXh0U2libGluZ0VsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGdldFByZXZpb3VzU2libGluZ0VsZW1lbnQoc2VsZWN0b3IgPSBXSUxEQ0FSRCkge1xuICBsZXQgcHJldmlvdXNTaWJsaW5nRWxlbWVudCA9IG51bGw7XG5cbiAgY29uc3QgcHJldmlvdXNTaWJsaW5nRE9NTm9kZSA9IHRoaXMuZG9tRWxlbWVudC5wcmV2aW91c1NpYmxpbmc7ICAvLy9cblxuICBpZiAoKHByZXZpb3VzU2libGluZ0RPTU5vZGUgIT09IG51bGwpICYmIGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IocHJldmlvdXNTaWJsaW5nRE9NTm9kZSwgc2VsZWN0b3IpKSB7XG4gICAgcHJldmlvdXNTaWJsaW5nRWxlbWVudCA9IHByZXZpb3VzU2libGluZ0RPTU5vZGUuX19lbGVtZW50X18gfHwgbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwcmV2aW91c1NpYmxpbmdFbGVtZW50O1xufVxuXG5jb25zdCBlbGVtZW50TWl4aW5zID0ge1xuICBnZXRQYXJlbnRFbGVtZW50LFxuICBnZXRDaGlsZEVsZW1lbnRzLFxuICBnZXRBc2NlbmRhbnRFbGVtZW50cyxcbiAgZ2V0RGVzY2VuZGFudEVsZW1lbnRzLFxuICBnZXROZXh0U2libGluZ0VsZW1lbnQsXG4gIGdldFByZXZpb3VzU2libGluZ0VsZW1lbnRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGVsZW1lbnRNaXhpbnM7XG4iXSwibmFtZXMiOlsiZ2V0UGFyZW50RWxlbWVudCIsInNlbGVjdG9yIiwiV0lMRENBUkQiLCJwYXJlbnRFbGVtZW50IiwicGFyZW50RE9NRWxlbWVudCIsImRvbUVsZW1lbnQiLCJtYXRjaGVzIiwicGFyZW50RE9NRWxlbWVudHMiLCJwYXJlbnRFbGVtZW50cyIsImVsZW1lbnRzRnJvbURPTUVsZW1lbnRzIiwiZmlyc3RQYXJlbnRFbGVtZW50IiwiZmlyc3QiLCJnZXRDaGlsZEVsZW1lbnRzIiwiY2hpbGRET01Ob2RlcyIsImNoaWxkTm9kZXMiLCJjaGlsZERPTUVsZW1lbnRzIiwiZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yIiwiY2hpbGRFbGVtZW50cyIsImdldEFzY2VuZGFudEVsZW1lbnRzIiwibWF4aW11bUhlaWdodCIsIkluZmluaXR5IiwiaGVpZ2h0IiwiZG9tTm9kZSIsImFzY2VuZGFudERPTU5vZGVzIiwiYXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZSIsImFzY2VuZGFudERPTUVsZW1lbnRzIiwiYXNjZW5kYW50RWxlbWVudHMiLCJnZXREZXNjZW5kYW50RWxlbWVudHMiLCJtYXhpbXVtRGVwdGgiLCJkZXB0aCIsImRlc2NlbmRhbnRET01Ob2RlcyIsImRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlIiwiZGVzY2VuZGFudERPTUVsZW1lbnRzIiwiZGVzY2VuZGFudEVsZW1lbnRzIiwiZ2V0TmV4dFNpYmxpbmdFbGVtZW50IiwibmV4dFNpYmxpbmdFbGVtZW50IiwibmV4dFNpYmxpbmdET01Ob2RlIiwibmV4dFNpYmxpbmciLCJkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yIiwiX19lbGVtZW50X18iLCJnZXRQcmV2aW91c1NpYmxpbmdFbGVtZW50IiwicHJldmlvdXNTaWJsaW5nRWxlbWVudCIsInByZXZpb3VzU2libGluZ0RPTU5vZGUiLCJwcmV2aW91c1NpYmxpbmciLCJlbGVtZW50TWl4aW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkF1RkE7OztlQUFBOzs7cUJBckZzQjt5QkFDRzttQkFDOEg7QUFFdkosU0FBU0E7UUFBaUJDLFdBQUFBLGlFQUFXQyxtQkFBUTtJQUMzQyxJQUFJQyxnQkFBZ0I7SUFFcEIsSUFBTUMsbUJBQW1CLElBQUksQ0FBQ0MsVUFBVSxDQUFDRixhQUFhLEVBQUUsR0FBRztJQUUzRCxJQUFJQyxxQkFBcUIsTUFBTTtRQUM3QixJQUFJQSxpQkFBaUJFLE9BQU8sQ0FBQ0wsV0FBVztZQUN0QyxJQUFNTSxvQkFBb0I7Z0JBQ2xCSDthQUNELEVBQ0RJLGlCQUFpQkMsSUFBQUEsNEJBQXVCLEVBQUNGLG9CQUN6Q0cscUJBQXFCQyxJQUFBQSxZQUFLLEVBQUNIO1lBRWpDTCxnQkFBZ0JPLHNCQUFzQjtRQUN4QztJQUNGO0lBRUEsT0FBT1A7QUFDVDtBQUVBLFNBQVNTO1FBQWlCWCxXQUFBQSxpRUFBV0MsbUJBQVE7SUFDM0MsSUFBTVcsZ0JBQWdCLElBQUksQ0FBQ1IsVUFBVSxDQUFDUyxVQUFVLEVBQzFDQyxtQkFBbUJDLElBQUFBLDZCQUF3QixFQUFDSCxlQUFlWixXQUMzRGdCLGdCQUFnQlIsSUFBQUEsNEJBQXVCLEVBQUNNO0lBRTlDLE9BQU9FO0FBQ1Q7QUFFQSxTQUFTQztRQUFxQmpCLFdBQUFBLGlFQUFXQyxtQkFBUSxFQUFFaUIsZ0JBQUFBLGlFQUFnQkM7SUFDakUsSUFBTUMsU0FBU0YsZUFDVEcsVUFBVSxJQUFJLENBQUNqQixVQUFVLEVBQ3pCa0Isb0JBQW9CQyxJQUFBQSxpQ0FBNEIsRUFBQ0YsU0FBU0QsU0FDMURJLHVCQUF1QlQsSUFBQUEsNkJBQXdCLEVBQUNPLG1CQUFtQnRCLFdBQ25FeUIsb0JBQW9CakIsSUFBQUEsNEJBQXVCLEVBQUNnQjtJQUVsRCxPQUFPQztBQUNUO0FBRUEsU0FBU0M7UUFBc0IxQixXQUFBQSxpRUFBV0MsbUJBQVEsRUFBRTBCLGVBQUFBLGlFQUFlUjtJQUNqRSxJQUFNUyxRQUFRRCxjQUNSTixVQUFVLElBQUksQ0FBQ2pCLFVBQVUsRUFDekJ5QixxQkFBcUJDLElBQUFBLGtDQUE2QixFQUFDVCxTQUFTTyxRQUM1REcsd0JBQXdCaEIsSUFBQUEsNkJBQXdCLEVBQUNjLG9CQUFvQjdCLFdBQ3JFZ0MscUJBQXFCeEIsSUFBQUEsNEJBQXVCLEVBQUN1QjtJQUVuRCxPQUFPQztBQUNUO0FBRUEsU0FBU0M7UUFBc0JqQyxXQUFBQSxpRUFBV0MsbUJBQVE7SUFDaEQsSUFBSWlDLHFCQUFxQjtJQUV6QixJQUFNQyxxQkFBcUIsSUFBSSxDQUFDL0IsVUFBVSxDQUFDZ0MsV0FBVyxFQUFFLEdBQUc7SUFFM0QsSUFBSSxBQUFDRCx1QkFBdUIsUUFBU0UsSUFBQUEsMkJBQXNCLEVBQUNGLG9CQUFvQm5DLFdBQVc7UUFDekZrQyxxQkFBcUJDLG1CQUFtQkcsV0FBVyxJQUFJO0lBQ3pEO0lBRUEsT0FBT0o7QUFDVDtBQUVBLFNBQVNLO1FBQTBCdkMsV0FBQUEsaUVBQVdDLG1CQUFRO0lBQ3BELElBQUl1Qyx5QkFBeUI7SUFFN0IsSUFBTUMseUJBQXlCLElBQUksQ0FBQ3JDLFVBQVUsQ0FBQ3NDLGVBQWUsRUFBRyxHQUFHO0lBRXBFLElBQUksQUFBQ0QsMkJBQTJCLFFBQVNKLElBQUFBLDJCQUFzQixFQUFDSSx3QkFBd0J6QyxXQUFXO1FBQ2pHd0MseUJBQXlCQyx1QkFBdUJILFdBQVcsSUFBSTtJQUNqRTtJQUVBLE9BQU9FO0FBQ1Q7QUFFQSxJQUFNRyxnQkFBZ0I7SUFDcEI1QyxrQkFBQUE7SUFDQVksa0JBQUFBO0lBQ0FNLHNCQUFBQTtJQUNBUyx1QkFBQUE7SUFDQU8sdUJBQUFBO0lBQ0FNLDJCQUFBQTtBQUNGO0lBRUEsV0FBZUkifQ==