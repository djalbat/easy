"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _array = require("../utilities/array");
var _constants = require("../constants");
var _dom = require("../utilities/dom");
function getParentElement(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var parentElement = null;
    var parentDOMElement = this.domElement.parentElement;
    if (parentDOMElement !== null) {
        if (parentDOMElement.matches(selector)) {
            var parentDOMElements = [
                parentDOMElement
            ], parentElements = (0, _dom).elementsFromDOMElements(parentDOMElements), firstParentElement = (0, _array).first(parentElements);
            parentElement = firstParentElement || null;
        }
    }
    return parentElement;
}
function getChildElements(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var childDOMNodes = this.domElement.childNodes, childDOMElements = (0, _dom).filterDOMNodesBySelector(childDOMNodes, selector), childElements = (0, _dom).elementsFromDOMElements(childDOMElements);
    return childElements;
}
function getAscendantElements(param, param1) {
    var selector = param === void 0 ? _constants.WILDCARD : param, maximumHeight = param1 === void 0 ? Infinity : param1;
    var height = maximumHeight, domNode = this.domElement, ascendantDOMNodes = (0, _dom).ascendantDOMNodesFromDOMNode(domNode, height), ascendantDOMElements = (0, _dom).filterDOMNodesBySelector(ascendantDOMNodes, selector), ascendantElements = (0, _dom).elementsFromDOMElements(ascendantDOMElements);
    return ascendantElements;
}
function getDescendantElements(param, param1) {
    var selector = param === void 0 ? _constants.WILDCARD : param, maximumDepth = param1 === void 0 ? Infinity : param1;
    var depth = maximumDepth, domNode = this.domElement, descendantDOMNodes = (0, _dom).descendantDOMNodesFromDOMNode(domNode, depth), descendantDOMElements = (0, _dom).filterDOMNodesBySelector(descendantDOMNodes, selector), descendantElements = (0, _dom).elementsFromDOMElements(descendantDOMElements);
    return descendantElements;
}
function getNextSiblingElement(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var nextSiblingElement = null;
    var nextSiblingDOMNode = this.domElement.nextSibling;
    if (nextSiblingDOMNode !== null && (0, _dom).domNodeMatchesSelector(nextSiblingDOMNode, selector)) {
        nextSiblingElement = nextSiblingDOMNode.__element__ || null;
    }
    return nextSiblingElement;
}
function getPreviousSiblingElement(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var previousSiblingElement = null;
    var previousSiblingDOMNode = this.domElement.previousSibling; ///
    if (previousSiblingDOMNode !== null && (0, _dom).domNodeMatchesSelector(previousSiblingDOMNode, selector)) {
        previousSiblingElement = previousSiblingDOMNode.__element__ || null;
    }
    return previousSiblingElement;
}
var elementMixins = {
    getParentElement: getParentElement,
    getChildElements: getChildElements,
    getAscendantElements: getAscendantElements,
    getDescendantElements: getDescendantElements,
    getNextSiblingElement: getNextSiblingElement,
    getPreviousSiblingElement: getPreviousSiblingElement
};
var _default = elementMixins;
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZWxlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBXSUxEQ0FSRCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IsIGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzLCBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IsIGFzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUsIGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kb21cIjtcblxuZnVuY3Rpb24gZ2V0UGFyZW50RWxlbWVudChzZWxlY3RvciA9IFdJTERDQVJEKSB7XG4gIGxldCBwYXJlbnRFbGVtZW50ID0gbnVsbDtcblxuICBjb25zdCBwYXJlbnRET01FbGVtZW50ID0gdGhpcy5kb21FbGVtZW50LnBhcmVudEVsZW1lbnQ7XG5cbiAgaWYgKHBhcmVudERPTUVsZW1lbnQgIT09IG51bGwpIHtcbiAgICBpZiAocGFyZW50RE9NRWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgY29uc3QgcGFyZW50RE9NRWxlbWVudHMgPSBbcGFyZW50RE9NRWxlbWVudF0sXG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50cyA9IGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzKHBhcmVudERPTUVsZW1lbnRzKSxcbiAgICAgICAgICAgIGZpcnN0UGFyZW50RWxlbWVudCA9IGZpcnN0KHBhcmVudEVsZW1lbnRzKTtcblxuICAgICAgcGFyZW50RWxlbWVudCA9IGZpcnN0UGFyZW50RWxlbWVudCB8fCBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJlbnRFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBnZXRDaGlsZEVsZW1lbnRzKHNlbGVjdG9yID0gV0lMRENBUkQpIHtcbiAgY29uc3QgY2hpbGRET01Ob2RlcyA9IHRoaXMuZG9tRWxlbWVudC5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZERPTUVsZW1lbnRzID0gZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yKGNoaWxkRE9NTm9kZXMsIHNlbGVjdG9yKSxcbiAgICAgICAgY2hpbGRFbGVtZW50cyA9IGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzKGNoaWxkRE9NRWxlbWVudHMpO1xuXG4gIHJldHVybiBjaGlsZEVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBnZXRBc2NlbmRhbnRFbGVtZW50cyhzZWxlY3RvciA9IFdJTERDQVJELCBtYXhpbXVtSGVpZ2h0ID0gSW5maW5pdHkpIHtcbiAgY29uc3QgaGVpZ2h0ID0gbWF4aW11bUhlaWdodCwgLy8vXG4gICAgICAgIGRvbU5vZGUgPSB0aGlzLmRvbUVsZW1lbnQsICAvLy9cbiAgICAgICAgYXNjZW5kYW50RE9NTm9kZXMgPSBhc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlKGRvbU5vZGUsIGhlaWdodCksXG4gICAgICAgIGFzY2VuZGFudERPTUVsZW1lbnRzID0gZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yKGFzY2VuZGFudERPTU5vZGVzLCBzZWxlY3RvciksXG4gICAgICAgIGFzY2VuZGFudEVsZW1lbnRzID0gZWxlbWVudHNGcm9tRE9NRWxlbWVudHMoYXNjZW5kYW50RE9NRWxlbWVudHMpO1xuXG4gIHJldHVybiBhc2NlbmRhbnRFbGVtZW50cztcbn1cblxuZnVuY3Rpb24gZ2V0RGVzY2VuZGFudEVsZW1lbnRzKHNlbGVjdG9yID0gV0lMRENBUkQsIG1heGltdW1EZXB0aCA9IEluZmluaXR5KSB7XG4gIGNvbnN0IGRlcHRoID0gbWF4aW11bURlcHRoLCAvLy9cbiAgICAgICAgZG9tTm9kZSA9IHRoaXMuZG9tRWxlbWVudCwgIC8vL1xuICAgICAgICBkZXNjZW5kYW50RE9NTm9kZXMgPSBkZXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZShkb21Ob2RlLCBkZXB0aCksXG4gICAgICAgIGRlc2NlbmRhbnRET01FbGVtZW50cyA9IGZpbHRlckRPTU5vZGVzQnlTZWxlY3RvcihkZXNjZW5kYW50RE9NTm9kZXMsIHNlbGVjdG9yKSxcbiAgICAgICAgZGVzY2VuZGFudEVsZW1lbnRzID0gZWxlbWVudHNGcm9tRE9NRWxlbWVudHMoZGVzY2VuZGFudERPTUVsZW1lbnRzKTtcblxuICByZXR1cm4gZGVzY2VuZGFudEVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBnZXROZXh0U2libGluZ0VsZW1lbnQoc2VsZWN0b3IgPSBXSUxEQ0FSRCkge1xuICBsZXQgbmV4dFNpYmxpbmdFbGVtZW50ID0gbnVsbDtcblxuICBjb25zdCBuZXh0U2libGluZ0RPTU5vZGUgPSB0aGlzLmRvbUVsZW1lbnQubmV4dFNpYmxpbmc7XG5cbiAgaWYgKChuZXh0U2libGluZ0RPTU5vZGUgIT09IG51bGwpICYmIGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IobmV4dFNpYmxpbmdET01Ob2RlLCBzZWxlY3RvcikpIHtcbiAgICBuZXh0U2libGluZ0VsZW1lbnQgPSBuZXh0U2libGluZ0RPTU5vZGUuX19lbGVtZW50X18gfHwgbnVsbDtcbiAgfVxuXG4gIHJldHVybiBuZXh0U2libGluZ0VsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGdldFByZXZpb3VzU2libGluZ0VsZW1lbnQoc2VsZWN0b3IgPSBXSUxEQ0FSRCkge1xuICBsZXQgcHJldmlvdXNTaWJsaW5nRWxlbWVudCA9IG51bGw7XG5cbiAgY29uc3QgcHJldmlvdXNTaWJsaW5nRE9NTm9kZSA9IHRoaXMuZG9tRWxlbWVudC5wcmV2aW91c1NpYmxpbmc7ICAvLy9cblxuICBpZiAoKHByZXZpb3VzU2libGluZ0RPTU5vZGUgIT09IG51bGwpICYmIGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IocHJldmlvdXNTaWJsaW5nRE9NTm9kZSwgc2VsZWN0b3IpKSB7XG4gICAgcHJldmlvdXNTaWJsaW5nRWxlbWVudCA9IHByZXZpb3VzU2libGluZ0RPTU5vZGUuX19lbGVtZW50X18gfHwgbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwcmV2aW91c1NpYmxpbmdFbGVtZW50O1xufVxuXG5jb25zdCBlbGVtZW50TWl4aW5zID0ge1xuICBnZXRQYXJlbnRFbGVtZW50LFxuICBnZXRDaGlsZEVsZW1lbnRzLFxuICBnZXRBc2NlbmRhbnRFbGVtZW50cyxcbiAgZ2V0RGVzY2VuZGFudEVsZW1lbnRzLFxuICBnZXROZXh0U2libGluZ0VsZW1lbnQsXG4gIGdldFByZXZpb3VzU2libGluZ0VsZW1lbnRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGVsZW1lbnRNaXhpbnM7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7Ozs7SUFFVSxNQUFvQjtJQUNqQixVQUFjO0lBQ2dILElBQWtCO1NBRWhLLGdCQUFnQixDQUFDLEtBQW1CO1FBQW5CLFFBQVEsR0FBUixLQUFtQixjQUhwQixVQUFjLFlBR2IsS0FBbUI7UUFDdkMsYUFBYSxHQUFHLElBQUk7UUFFbEIsZ0JBQWdCLFFBQVEsVUFBVSxDQUFDLGFBQWE7UUFFbEQsZ0JBQWdCLEtBQUssSUFBSTtZQUN2QixnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsUUFBUTtnQkFDN0IsaUJBQWlCO2dCQUFJLGdCQUFnQjtlQUNyQyxjQUFjLE9BVjZILElBQWtCLDBCQVVwSCxpQkFBaUIsR0FDMUQsa0JBQWtCLE9BYlIsTUFBb0IsUUFhSCxjQUFjO1lBRS9DLGFBQWEsR0FBRyxrQkFBa0IsSUFBSSxJQUFJOzs7V0FJdkMsYUFBYTs7U0FHYixnQkFBZ0IsQ0FBQyxLQUFtQjtRQUFuQixRQUFRLEdBQVIsS0FBbUIsY0FyQnBCLFVBQWMsWUFxQmIsS0FBbUI7UUFDckMsYUFBYSxRQUFRLFVBQVUsQ0FBQyxVQUFVLEVBQzFDLGdCQUFnQixPQXRCK0gsSUFBa0IsMkJBc0JySCxhQUFhLEVBQUUsUUFBUSxHQUNuRSxhQUFhLE9BdkJrSSxJQUFrQiwwQkF1QnpILGdCQUFnQjtXQUV2RCxhQUFhOztTQUdiLG9CQUFvQixDQUFDLEtBQW1CLEVBQUUsTUFBd0I7UUFBN0MsUUFBUSxHQUFSLEtBQW1CLGNBN0J4QixVQUFjLFlBNkJULEtBQW1CLEVBQUUsYUFBYSxHQUFiLE1BQXdCLGNBQVIsUUFBUSxHQUF4QixNQUF3QjtRQUNuRSxNQUFNLEdBQUcsYUFBYSxFQUN0QixPQUFPLFFBQVEsVUFBVSxFQUN6QixpQkFBaUIsT0EvQjhILElBQWtCLCtCQStCaEgsT0FBTyxFQUFFLE1BQU0sR0FDaEUsb0JBQW9CLE9BaEMySCxJQUFrQiwyQkFnQ2pILGlCQUFpQixFQUFFLFFBQVEsR0FDM0UsaUJBQWlCLE9BakM4SCxJQUFrQiwwQkFpQ3JILG9CQUFvQjtXQUUvRCxpQkFBaUI7O1NBR2pCLHFCQUFxQixDQUFDLEtBQW1CLEVBQUUsTUFBdUI7UUFBNUMsUUFBUSxHQUFSLEtBQW1CLGNBdkN6QixVQUFjLFlBdUNSLEtBQW1CLEVBQUUsWUFBWSxHQUFaLE1BQXVCLGNBQVIsUUFBUSxHQUF2QixNQUF1QjtRQUNuRSxLQUFLLEdBQUcsWUFBWSxFQUNwQixPQUFPLFFBQVEsVUFBVSxFQUN6QixrQkFBa0IsT0F6QzZILElBQWtCLGdDQXlDOUcsT0FBTyxFQUFFLEtBQUssR0FDakUscUJBQXFCLE9BMUMwSCxJQUFrQiwyQkEwQ2hILGtCQUFrQixFQUFFLFFBQVEsR0FDN0Usa0JBQWtCLE9BM0M2SCxJQUFrQiwwQkEyQ3BILHFCQUFxQjtXQUVqRSxrQkFBa0I7O1NBR2xCLHFCQUFxQixDQUFDLEtBQW1CO1FBQW5CLFFBQVEsR0FBUixLQUFtQixjQWpEekIsVUFBYyxZQWlEUixLQUFtQjtRQUM1QyxrQkFBa0IsR0FBRyxJQUFJO1FBRXZCLGtCQUFrQixRQUFRLFVBQVUsQ0FBQyxXQUFXO1FBRWpELGtCQUFrQixLQUFLLElBQUksUUFyRHFILElBQWtCLHlCQXFEM0csa0JBQWtCLEVBQUUsUUFBUTtRQUN0RixrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxXQUFXLElBQUksSUFBSTs7V0FHdEQsa0JBQWtCOztTQUdsQix5QkFBeUIsQ0FBQyxLQUFtQjtRQUFuQixRQUFRLEdBQVIsS0FBbUIsY0E3RDdCLFVBQWMsWUE2REosS0FBbUI7UUFDaEQsc0JBQXNCLEdBQUcsSUFBSTtRQUUzQixzQkFBc0IsUUFBUSxVQUFVLENBQUMsZUFBZSxDQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztRQUUvRCxzQkFBc0IsS0FBSyxJQUFJLFFBakVpSCxJQUFrQix5QkFpRXZHLHNCQUFzQixFQUFFLFFBQVE7UUFDOUYsc0JBQXNCLEdBQUcsc0JBQXNCLENBQUMsV0FBVyxJQUFJLElBQUk7O1dBRzlELHNCQUFzQjs7SUFHekIsYUFBYTtJQUNqQixnQkFBZ0IsRUFBaEIsZ0JBQWdCO0lBQ2hCLGdCQUFnQixFQUFoQixnQkFBZ0I7SUFDaEIsb0JBQW9CLEVBQXBCLG9CQUFvQjtJQUNwQixxQkFBcUIsRUFBckIscUJBQXFCO0lBQ3JCLHFCQUFxQixFQUFyQixxQkFBcUI7SUFDckIseUJBQXlCLEVBQXpCLHlCQUF5Qjs7ZUFHWixhQUFhIn0=